<!-- browser and save dialog-->
<!ENTITY Intro_1 "Регулярные выражения представляют собой образцы для поиска заданных комбинаций символов в текстовых строках (такой поиск называется сопоставлением с образцом).">
<!ENTITY Intro_2 "При помощи регулярных выражений вы можете фильтровать имена файлов или доменов в случаях когда использование '*' невозможно.">

<!ENTITY Note1.title "Замечание 1">
<!ENTITY Note1.text "Все фильтры не учитывают регистр.">
<!ENTITY Note2.title "Замечание 2">
<!ENTITY Note2.text "Регулярные выражения в дополнении должны быть заключены в между символами / /.
Все примеры, описанные ниже не содержат / / в начале и конце, для удобства чтения.
Если вы включите галочку Рег. выражения символы  / / будут добавлены автоматически.">

<!ENTITY Title_1 "Специальные теги">
<!ENTITY Intro_3 "Так же как и символ '*' (звездочка) используется для замены неограниченного числа знаков в строке, так и регулярные выражения
используют некоторое количество специальных букв для замены определенных групп символов в строке :">

<!ENTITY The.dot.title "Точка .">
<!ENTITY The.dot.text "Соответствует любому символу, кроме символа новой строки.<br />
'g..gle' будет соответствовать любому  слову начинающемуся с 'g' и имеющему далее любых два символа и заканчивающемуся на 'gle'.">

<!ENTITY The.asterisk.title "Звездочка *">
<!ENTITY The.asterisk.text "Соответствует повторению предыдущего символа нуль или более раз.<br />
'go*gle' соответствует gogle, google, goooooooooogle, и т.д.<br />
'.*' (точка перед звездочкой) соответствует  любому кол-ву символов подряд.<br />
Если использовать '.*' отдельно - это будет соответствовать любой последовательности символов, точно так же как если выбрать опцию 'Все' для фильтра.">

<!ENTITY The.caret.title "Символ ^">
<!ENTITY The.caret.text "Соответствует началу строки. <br />
'^http' найдет 'http' только в начале строки.<br />
Фильтр подойдет для 'http://test.com'  но не подойдет для 'ftp://http_test.com', поскольку 'http' во втором случае не в начале.">

<!ENTITY The.dollar.title "Знак доллара $">
<!ENTITY The.dollar.text "Соответствует концу строки. <br />
'com$' соответствует любой строке, заканчивающейся на 'com'.<br />
Фильтр подойдет для 'http://test.com' но не подойдет для 'http://computer.net', поскольку 'com' во втором случае не в конце строки.">

<!ENTITY The.braces.title "Фигурные скобки {}">
<!ENTITY The.braces.text "Выражение {n}, где n - неотрицательное число. Соответствует ровно n вхождениям предыдущего символа.<br />
Пример go{2}gle = google (символ 'o' повторен 2 раза)<br />
Выражение {n,m}, где n и m - неотрицательное числа. Соответствует не менее чем n и не более чем m вхождениям предыдущего символа.<br />
Пример 'go{0,2}gle' соответствует 'ggle', 'gogle' или 'google'.">

<!ENTITY The.parenthesis.title "Круглые скобки ( ) и символ |">
<!ENTITY The.parenthesis.text "Выражение (pattern) - Соответствует строке pattern и запоминает найденное соответствие.<br />
Выражение x|y Соответствует x или y.<br />
(aaaa|bbbb|cccc) найдет соответствие одной из групп символов aaaa, bbbb или cccc, но только один раз.
(b|g)oogle соответствует boogle, google, но не соответствует bgoogle<br />
<br />
Можно добавлять опции для круглых скобок:<br />
'(b|g){1,2}oogle' найдет один или несколько буквы b или g, идущие перед 'oogle'<br />
Соответствуют все из перечисленных boogle, bboogle, google, ggoogle, bgoogle, gboogle.<br />
<br />
'(b|g)*oogle' соответствует неограниченному числу символов b и g  перед 'oogle'.">

<!ENTITY The.question.title "Знак вопроса?">
<!ENTITY The.question.text "Соответствует повторению предыдущего символа нуль или один раз.<br />
Пример: MPEG файлы  могут иметь расширение '.mpg' or '.mpeg'. Соответствующее регулярное выражение выглядит так 'mpe?g'<br />
Nov(ember)? соответствует  Nov и November<br />
? - это краткая формы выражения {0,1}<br />
Nov(ember)? = Nov(ember){0,1}<br />
<br />
Знак вопроса может быть использовать для перевода регулярного выражения из 'жадного' (по умолчанию) в 'нежадное' состояние.<br />
Важной особенностью символа '*' является то, что он найдет максимальное кол-во символов которому он может соответствовать. <br />
Пример:<br />
Строка : &#34;This is a test&#34;<br />
Фильтр 1 : &#34;t.*t&#34; будет соответствовать все строке &#34;This is a test&#34;<br />
Фильтр 2 : &#34;t.*?t&#34; будет соответствовать  &#34;This is a t&#34;, только до первого нахождения второй буквы t слева-направо.">

<!ENTITY The.bracket.title "Квадратные скобки [ ]">
<!ENTITY The.bracket.text "[xyz] Соответствует любому символу из заключенных в квадратные скобки.<br />
В отличие от круглых скобок символы внутри квадратных скобок воспринимаются не как слова, а как независимые буквы.<br />
Nov[embr] будет соответствовать только одной букве внутри скобок, но не всем: Nove, Novm, Novb or Novr.<br />
<br />
[a-z] - Соответствует любому символу в указанном диапазоне.
<br />
Можно использовать более одного диапазона внутри скобок.<br /> [a-zA-Z] соответствует всем символам алфавита. [a-zA-Z0-9] соответствует всем символам алфавита и цифрам.<br />
Можно использовать любые символы и группы символов внутри скобок: [_+.()a-d\s] соответствует буквам 'от a до d' плюс символы _, +, точка, скобки и пробел.<br />
Чтобы найти знак минус - нужно указать его в начале -  [-a-z] соответствует  '-' и буквам от a до z.<br />
<br />
<br />
Квадратные скобки соответствуют только одному символу, но можно указать больше следующим образом:<br />
t[se]*t соответствует : 'tet', 'tst', 'test', 'tset' и 'tesssst'<br /> 
t[es]{0,2} соответствует 't', 'te', 'ts', 'tee', 'tss', 'tes' и 'tse'">

<!ENTITY The.backslash.title "Обратный слеш \ перед буквой">
<!ENTITY The.backslash.text "\d matches the numbers<br />
\b - Соответствует границе слова, т. е. позиции между словом и пробелом или переводом строки.<br />
\B - Соответствует любой позиции, кроме границе слова.<br />
\сX - Соответствует символу Ctrl+X. Например, /\cI/ эквивалентно /\t/.<br />
\d - Соответствует цифре. Эквивалентно [0-9].<br />
\D - Соответствует нецифровому символу. Эквивалентно [^0-9].<br />
\f - Соответствует символу перевода формата (FF).<br />
\n - Соответствует символу перевода строки (LF).<br />
\r - Соответствует символу возврата каретки (CR).<br />
\s - Соответствует символу пробела. Эквивалентно /[ \f\n\r\t\v]/.<br />
\S - Соответствует любому непробельному символу. Эквивалентно /[^ \f\n\r\t\v]/.<br />
\t - Соответствует символу табуляции (HT).<br />
\v - Соответствует символу вертикальной табуляции (VT).<br />
\w - Соответствует латинской букве, цифре или подчеркиванию. Эквивалентно /[A-Za-z0-9_] /.<br />
\W - Соответствует любому символу, кроме латинской буквы, цифры или подчеркивания. Эквивалентно /[^A-Za-z0-9_] /.<br />
\n, где n - положительное число. - Соответствует n-ной запомненной подстроке. Вычисляется путем подсчета левых круглых скобок. Если левых скобок до этого символа меньше, чем n, то эквивалентно \0n.<br />
\0n , где n - восьмеричное число, не большее 377. - Соответствует символу с восьмеричным кодом n. Например, /\011/ эквивалентно /\t/.<br />
\xn , где n - шестнадцатеричное число, состоящее из двух цифр. - Соответствует символу с шестнадцатеричным кодом n. Например, /\x31/ эквивалентно /1/.<br />
\un , где n - шестнадцатеричное число, состоящее из четырех цифр. - Соответствует символу Unicode с шестнадцатеричным кодом n. Например, /\u00A9/ эквивалентно /©/.<br />
<br />
Пример: \u00A9 соответствует '©'.">

<!ENTITY The.backslash.info "Если вам нужно найти соответствие конкретному символу из описанных выше, необходимо перед ним поставить символ обратного слеша \.<br />
Например чтобы найти круглые скобки a имени файла 'my_file(2007).jpg', необходимо использовать следующее регулярное выражение: my_file\(2007\)\.jpg <br />
<br />
Для поиска всех, описанных ниже символов, нужно использовать обратный слеш \:">

<!-- feel free to add a link to a Regexp website on your own language -->
<!ENTITY Regexp.links "Существует много других способов использования регулярных выражений, не описанных здесь.<br />
Для более глубокого изучения регулярных выражений можно использовать следующие ресурсы в сети.: <br />
<b>http://www.regular-expressions.info</b> - Справочник и ресурсы по регулярным выражениям (англ.)<br/>
<b>http://www.pcre.ru/docs/javascript</b> - Примеры и документация по регулярным выражениям (рус.)">


<!ENTITY Example_1.title "Несколько примеров">
<!ENTITY Example_1.text "Фильтр для .rar, .r01 и .rxx файлов:<br />
r(ar|\d{2}) <br />
Начинается на 'r' и заканчивается на 'ar' или 2 цифры<br />
<br />
Любой сайт в зоне .com:<br />
^http.*\.com$<br />
Начинается с 'http',  далее идет любая последовательность символов и заканчивается на '.com'.<br />
<br />
Имя домена с иил без www:<br />
 ^http:\/\/(|www\.)mozilla\.org<br />
Начинается с 'http:\\' , далее  c или без 'www.' ? далее имя домена (например 'mozilla.org')<br />
">

<!ENTITY Example_2.title "Фильтры по имени файла">
<!ENTITY Example_2.text "Для архивов: <br />
.*\.(z(ip|\d{2})|r(ar|\d{2})|jar|bz2|gz|tar|rpm|7z)$<br />
<br />
Для видео файлов:<br />
.*\.(mp(eg?|[g4])|rm|avi|mov|divx|asf|qt|wmv|ram|m1v|m2v|rv|vob|asx)$<br />
<br />
Для картинок:<br />
.*\.(jpe?g|jpe|gif|png|tiff?|bmp|ico)$"> 

<!ENTITY Example_3.title "Филтры для доменов">
<!ENTITY Example_3.text "Фильтр для ftp протокола:<br />
С рег. выражением. : ^ftp:\/\/.*<br />
Без рег. выражения. : ftp://<br />
<br />
По имени домена:<br />
С рег. выражением. : ^http:\/\/(|www\.)domain\.com$<br />
Без рег. выражения. : http://*domain.com<br />
(Без рег. выражения. будет работать для http://domain.com  или http://www.domain.com, но так же будет соответствовать http://not_the_good.domain.com<br />
<br />
<br />
Любой домен с 'oogle' в имени домена:<br />
С рег. выражением : .*oogle.*<br />
Без рег. выражения : oogle">

<!ENTITY Conclusion.title "Заключение">
<!ENTITY Conclusion.text "Регулярные выражения позволяют более полно использовать фильтры, однако иногда проще и быстрее использовать маски со звездочкой *.<br />
Регулярные выражения полезны для сложных ситуаций.">